$text-color: #333333 !default;


@function atl($color, $alpha: 1) {
  @return rgba($color, $alpha);
}

@function get($list, $name) {
  @if map-has-key($list, $name) {
    $item: map-get($list, $name);
    @if(type-of($item) == string) {
      @if(str-index($item, 'http') or str-index($item, '/')) {
        @return url($item);
      } @else {
        @return $item;
      }
    }
    @return $item;
  }
  @error '`#{$name}` does not exist';
}

@function pow($number, $exponent) {
  @if (round($exponent) != $exponent) {
    @return exp($exponent * ln($number));
  }

  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
     $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function factorial($value) {
  $result: 1;

  @if $value == 0 {
    @return $result;
  }

  @for $index from 1 through $value {
    $result: $result * $index;
  }

  @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;

  @for $index from $initial to $limit {
    $sum: $sum + call($iteratee, $input, $index);
  }

  @return $sum;
}

@function exp-maclaurin($x, $n) {
  @return (pow($x, $n) / factorial($n));
}

@function exp($value) {
  @return summation('exp-maclaurin', $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
  @return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}

@function ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;

  @while ($value > pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }

  @return summation(ln-maclaurin, $value / pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}


@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/* ----------- Functions ----------- */
@function check-text-color($color) {
  @if (lightness($color) < 60 and $color != transparent and $color != none) {
    @return #ffffff; // Lighter backgorund, return dark color
  } @else {
    @return $text-color; // Darker background, return light color
  }
}

@function dark($color, $darken: 10%, $saturation: 0%) {
  $dark: scale-color($color, $lightness: -$darken, $saturation: $saturation);
  @if (lightness($dark) > 0) {
    @return $dark; // If not black return darkened color
  } @else {
    @return $color; // Return input color
  }
  @error '`#{$color}` is not a color';
}

@function light($color, $lighten: 12%, $saturation: 0%) {
  $light: scale-color($color, $lightness: $lighten, $saturation: $saturation);
  @if (lightness($light) < 100%) {
    @return $light; // If not black return darkened color
  } @else {
    @return $color; // Return input color
  }
  @error '`#{$color}` is not a color';
}

// Index check function
@function z($list, $element) {
  $z-index: index($list, $element);

  @if $z-index {
    @return $z-index;
  }

  @warn 'There is no item '#{$element}' in this list; choose one of: #{$list}';
  @return null;
}

@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

@function get-deep($map, $string) {
  $temp: $map;
  $array: str-split($string, '.');

  @each $var in $array {
    $temp: map-get($temp, $var)
  }

  @return $temp
}
